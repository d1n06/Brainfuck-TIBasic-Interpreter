ClrHome

" Input your code to a temporal variable
Disp "Input your code"
Input ":",Str3

" If you input '0', the last code you ran will be used, or the one stored in the Str1 var if you changed it
If Str3≠"0"
Str3→Str1

" N helps keep track if there are too many or too few brackets
0→N

" L2 is the list showing where brackets are
{0}→L₂
length(Str1)→dim(L₂)

Disp "Checking errors..."

" Str2 contains the 8 available symbols
".,+-><{}"→Str2

" Iterate through the code
For(I,1,length(Str1),1)

" Str3 is the i-th char in the code
sub(Str1,I,1)→Str3

" If the char is not available, the code is wrong
If inString(Str2,Str3)=0
Then
Disp "Wrong symbol","' ' at pos"
Output(3,2,Str3)
Output(3,12,I)
Stop
End

If Str3="{"
Then
N+1→N
1→L₂(I)
End

If Str3="}"
Then
N-1→N
­1→L₂(I)
End

End

" The code is wrong if the number of open and closed brackets are different
If N≠0
Then
Disp "Unmatched","brackets!"
Stop
End

" Code is ok if the execution reaches here
Disp "No wrong symbols","","Press enter to","run your code"
Pause 

ClrHome

" L1 is the program's memory, with 32 entries
32→dim(L₁)
Fill(0,L₁)

" J is the current memory pointer
1→J

" I is the current code pointer
1→I

" Iterate through the code
While I≤length(Str1)

" Str2 is the i-th symbol
sub(Str1,I,1)→Str2

" '.' displays the memory's current entry
If Str2="."
Disp L₁(J)

" ',' overwrites the memory's current entry with the user's input
If Str2=","
Then
Input T
T→L₁(J)
End

" '+' adds one to the entry
If Str2="+"
L₁(J)+1→L₁(J)

" '-' substracts one from the entry
If Str2="-"
L₁(J)-1→L₁(J)

" '>' shifts the memory pointer to the right
If Str2=">"
Then
J+1→J
If J=33
1→J
End

" '<' shifts the memory pointer to the left
If Str2="<"
Then
J-1→J
If J=0
32→J
End

" '{' jumps to the corresponding '}' if the entry is 0
" Fuck this method to do loops
If Str2="{" and L₁(J)=0
Then
I+1→K
0→N
While K≤length(Str1)
If L₂(K)=1
N+1→N
If L₂(K)=­1
Then
If N=0
Then
K→I
length(Str1)+1→K
End
N-1→N
End
K+1→K
End
End

" '}' jumps to the corresponding '{' if the entry is not 0, making a loop
If Str2="}" and L₁(J)≠0
Then
I-1→K
0→N
While K≥0
If L₂(K)=­1
N+1→N
If L₂(K)=1
Then
If N=0
Then
K→I
­1→K
End
N-1→N
End
K-1→K
End
End

" Next char
I+1→I
End